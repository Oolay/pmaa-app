{"version":3,"sources":["data/getMockData.ts","data/pmaaDetails.ts","utils/getRandomColor.ts","components/icons/Refresh.tsx","components/icons/Back.tsx","components/Visualiser/ActionButtons.tsx","components/Visualiser/Graph.tsx","utils/minMax.ts","components/Visualiser/PmaaGrid.tsx","components/Visualiser/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getMockData","nPoints","Array","fill","map","_","i","x","Math","floor","random","y","addDataSetAndColor","pmaa","data","color","toString","pmaaData","groupName","items","name","linkage","group","item","Refresh","display","viewBox","width","d","Back","useStyles","makeStyles","container","justifyContent","ActionButtons","onDataZoomBack","onRefreshView","classes","className","IconButton","size","onClick","Typography","graphContainer","zoomBox","zIndex","position","border","backgroundColor","opacity","GRAPH_HEIGHT","margin","INIITIAL_ZOOM_RECT","initialX","dragX","rectX","rectY","height","Graph","dataSets","onDataZoom","dataSet","useRef","graphSVG","useState","isZooming","setIsZooming","zoomData","zoomRect","setZoomRect","requestRef","xGraphMax","yGraphMax","reduce","flatDataSets","minX","maxX","minY","maxY","Infinity","getMinMaxOfDataSets","xScale","scaleLinear","domain","range","round","xScaleReverse","yScale","yScaleReverse","eventXToGraphX","graphContainerOffset","graphX","eventYToGraphY","graphY","changeZoomRect","current","ref","clientX","clientY","getBoundingClientRect","left","top","window","cancelAnimationFrame","onMouseMove","requestAnimationFrame","Group","AxisLeft","scale","label","stroke","AxisBottom","setIndex","barColor","barX","barY","barHeight","Bar","padding","gridHeader","paddingTop","paddingBottom","columnTitleItem","rowtitleItem","contentItem","borderRadius","PmaaList","pmaaGroup","columns","rows","selectedPmaas","onPmaaClick","isPmaaSelected","id","some","selectedId","variant","col","noWrap","row","pmaas","filter","style","flexDirection","alignItems","gridContainer","overflowY","emptyTextContainer","Visualiser","graphData","setGraphData","setSelectedPmaas","onItemClick","prevSelected","useEffect","selectedPmaaId","pmaaId","split","find","groupData","groupItem","getGraphData","getLatestZoomData","length","showGraph","prevState","slice","newData","Set","PmaaGrid","from","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAkBeA,MAhBf,SAAqBC,GACjB,OAAOC,MAAMD,GAASE,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAClC,IAAMC,EAAID,EAAI,EAEd,OAAIE,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GAG3B,CAAEH,IAAGI,EAFFH,KAAKC,MAAsB,IAAhBD,KAAKE,WAKvB,CAAEH,IAAGI,EAAG,OCDvB,SAASC,EAAmBC,GACxB,IAAMC,EAAOd,EAAY,KACnBe,ECVC,IAFaP,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBM,SAAS,IDehE,OAAO,2BAAKH,GAAZ,IAAkBC,OAAMC,UAG5B,IA4MaE,EA5MC,CACV,CACIC,UAAW,uCACXC,MAAO,CACH,CAAEC,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,KAC5B,CAAED,KAAM,UAAWC,QAAS,OAElC,CACEH,UAAW,yCACXC,MAAO,CACH,CAAEC,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,OAC5B,CAAED,KAAM,UAAWC,QAAS,SAEjC,CACCH,UAAW,2CACXC,MAAO,CACH,CAAEC,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,UAAWC,QAAS,SAC5B,CAAED,KAAM,UAAWC,QAAS,WAEjC,CACCH,UAAW,0DACXC,MAAO,CACH,CAAEC,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,KACzB,CAAED,KAAM,OAAQC,QAAS,OAE9B,CACCH,UAAW,sDACXC,MAAO,CACH,CAAEC,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,OACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,SACzB,CAAED,KAAM,OAAQC,QAAS,YAKPjB,KAAI,SAACkB,GAAD,mBAAC,eAC5BA,GAD2B,IAE9BH,MAAOG,EAAMH,MAAMf,KAAI,SAAAmB,GAAI,OAAIX,EAAmBW,W,kBEpNvCC,EAXU,kBACrB,qBACIC,QAAQ,QACRtB,KAAK,QACLuB,QAAQ,YACRC,MAAO,GAJX,SAMI,sBAAMC,EAAE,kNCIDC,EAXO,kBAClB,qBACIJ,QAAQ,QACRtB,KAAK,QACLuB,QAAQ,YACRC,MAAO,GAJX,SAMI,sBAAMC,EAAE,oECCVE,EAAYC,YAAW,CACzBC,UAAW,CACPP,QAAS,OACTQ,eAAgB,YA8BTC,EArBuB,SAAC,GAGhC,IAFHC,EAEE,EAFFA,eACAC,EACE,EADFA,cAEMC,EAAUP,EAAU,IAE1B,OACI,sBAAKQ,UAAWD,EAAQL,UAAxB,UACI,cAACO,EAAA,EAAD,CAAYC,KAAK,QAAQC,QAASN,EAAlC,SACI,cAAC,EAAD,MAEJ,cAACO,EAAA,EAAD,qCAGA,cAACH,EAAA,EAAD,CAAYC,KAAK,QAAQC,QAASL,EAAlC,SACI,cAAC,EAAD,U,6CC3BhB,IAAMN,EAAYC,YAAW,CACzBY,eAAgB,CACZlB,QAAS,OACTQ,eAAgB,UAEpBW,QAAS,CACLC,OAAQ,IACRC,SAAU,WACVC,OAAQ,kBACRC,gBAAiB,OACjBC,QAAS,MAkBJC,EAAe,IAEtBC,EACG,GADHA,EAGI,GAaJC,EAAqB,CACvBC,SAAU,EACVC,MAAO,EACPC,MAAO,EACPC,MAAO,EACP7B,MAAO,EACP8B,OAAQ,GAkOGC,EA/NgB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAClCvB,EAAUP,EAAU,IACpBhB,EAAO6C,EAASvD,KAAI,SAAAyD,GAAO,OAAIA,EAAQ/C,QAEvC6B,EAAiBmB,iBAAuB,MAGxCC,EAAWD,iBAAsB,MAPkB,EAQvBE,oBAAkB,GARK,mBAQlDC,EARkD,KAQvCC,EARuC,KASnDC,EAAWL,iBAAiBV,GATuB,EAUzBY,mBAAmBZ,GAVM,mBAUlDgB,EAVkD,KAUxCC,EAVwC,KAWnDC,EAAaR,mBAGbS,EA1CiB,IA0CSpB,EAAc,GACxCqB,EAAYtB,EAAeC,EAAa,GAfW,ECnCtD,SAA6BQ,GAGhC,OAFiBA,EAASc,QAAO,SAACC,EAAcb,GAAf,4BAA+Ba,GAA/B,YAAgDb,MAAU,IArB/EY,QAAO,cAA2C,IAAxCE,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAUvE,EAAW,EAAXA,EAAGI,EAAQ,EAARA,EAMjD,MAAO,CACHgE,KANYpE,EAAIoE,EAAOpE,EAAIoE,EAO3BC,KANYrE,EAAIqE,EAAOrE,EAAIqE,EAO3BC,KANYlE,EAAIkE,EAAOlE,EAAIkE,EAO3BC,KANYnE,EAAImE,EAAOnE,EAAImE,KAQhC,CACCH,KAAMI,IACNH,MAAM,IACNC,KAAME,IACND,MAAM,MDyDyBE,CAAoBlE,GAA/C6D,EAlBiD,EAkBjDA,KAAMC,EAlB2C,EAkB3CA,KAAMC,EAlBqC,EAkBrCA,KAAMC,EAlB+B,EAkB/BA,KAEpBG,EAASC,YAAY,CACvBC,OAAQ,CAACR,EAAMC,GACfQ,MAAO,CAAC,EAAGb,GACXc,OAAO,IAGLC,EAAgBJ,YAAY,CAC9BC,OAAQ,CAAC,EAAGZ,GACZa,MAAO,CAACT,EAAMC,GACdS,OAAO,IAGLE,EAASL,YAAY,CACvBC,OAAQ,CAACN,EAAMC,GACfM,MAAO,CAACZ,EAAW,GACnBa,OAAO,IAGLG,EAAgBN,YAAY,CAC9BC,OAAQ,CAACX,EAAW,GACpBY,MAAO,CAACP,EAAMC,GACdO,OAAO,IAGLI,EAAiB,SAAClF,EAAWmF,GAC/B,IAAIC,EAASpF,EAAI4C,EAAcuC,EAU/B,OARIC,EAAS,IACTA,EAAS,GAGTA,EAASpB,IACToB,EAASpB,GAGNoB,GAGLC,EAAiB,SAACjF,EAAW+E,GAC/B,IAAIG,EAASlF,EAAIwC,EAAauC,EAU9B,OARIG,EAAS,IACTA,EAAS,GAGTA,EAASrB,IACTqB,EAASrB,GAGNqB,GAGLC,EAAiB,WACnB,IAAInE,EADqB,EAEiBwC,EAAS4B,QAA3CzC,EAFiB,EAEjBA,MAAOD,EAFU,EAEVA,SAAUE,EAFA,EAEAA,MAAOC,EAFP,EAEOA,MAG5B7B,EADA2B,EAAQD,EACAA,EAAWE,EAEXD,EAAQD,EAGpB,IAAMI,EAASe,EAAYhB,EAE3BW,EAAS4B,QAAT,2BAAwB5B,EAAS4B,SAAjC,IAA0CpE,UAC1C0C,EAAY,2BAAKF,EAAS4B,SAAf,IAAwBpE,QAAO8B,aA0E9C,OACI,qBACIuC,IAAKrD,EACLL,UAAWD,EAAQM,eACnBF,QApEiB,SAAC,GAA4D,IAA1DwD,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,QACjC,GAAKnC,EAASgC,QAAd,CADiF,MAK3DhC,EAASgC,QAAQI,wBAA/BC,EALyE,EAKzEA,KAAMC,EALmE,EAKnEA,IACVV,EAASF,EAAeQ,EAASG,GACjCP,EAASD,EAAeM,EAASG,GAEjCpC,GACAL,EAAW,CACPe,KAAMW,EAAcnB,EAAS4B,QAAQxC,OACrCqB,KAAMU,EAAcnB,EAAS4B,QAAQxC,MAAQY,EAAS4B,QAAQpE,OAC9DmD,KAAMU,EAAcrB,EAAS4B,QAAQvC,SAEzCU,GAAa,GArBjBC,EAAS4B,QAAU3C,EACnBiB,EAAYjB,GAEZkD,OAAOC,qBAAqBjC,EAAWyB,WAqBnC5B,EAAS4B,QAAT,2BACO5B,EAAS4B,SADhB,IAEIxC,MAAOoC,EACPnC,MAAOqC,EACPxC,SAAUsC,IAGdzB,GAAa,MA4CbsC,YAxCe,SAAC,GAA4D,IAA1DP,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,QAC/B,GAAKjC,GAIAF,EAASgC,QAAd,CAL+E,MASzDhC,EAASgC,QAAQI,wBAA/BC,EATuE,EASvEA,KAAMC,EATiE,EASjEA,IACVV,EAASF,EAAeQ,EAASG,GACjCP,EAASD,EAAeM,EAASG,GAEjCV,EAASxB,EAAS4B,QAAQ1C,SAC1Bc,EAAS4B,QAAT,2BACO5B,EAAS4B,SADhB,IAEIxC,MAAOoC,EACPrC,MAAOqC,IAGXxB,EAAS4B,QAAT,2BACO5B,EAAS4B,SADhB,IAEIxC,MAAOY,EAAS4B,QAAQ1C,SACxBC,MAAOqC,IAIfxB,EAAS4B,QAAT,2BACO5B,EAAS4B,SADhB,IAEIvC,MAAOqC,IAGXvB,EAAWyB,QAAUU,sBAAsBX,KAI3C,SAMI,qBAAKE,IAAKjC,EAAUN,OAAQP,EAAcvB,MAlM3B,IAkMf,SACI,eAAC+E,EAAA,EAAD,CAAOL,IAAKlD,EAAYiD,KAAMjD,EAA9B,UACI,cAACwD,EAAA,EAAD,CACIC,MAAOrB,EACPc,IAAK,EACLD,KAAM,EACNS,MAAO,UACPC,OAAQ,YAEZ,cAACC,EAAA,EAAD,CACIH,MAAO3B,EACPoB,IAAK7B,EACLqC,MAAO,UACPC,OAAQ,YAGRnD,EAASvD,KAAI,SAACyD,EAASmD,GACnB,IAAMC,EAAWpD,EAAQ9C,MAEzB,OAAO8C,EAAQ/C,KAAKV,KAAI,YAAe,IAAZG,EAAW,EAAXA,EAAGI,EAAQ,EAARA,EACpBuG,EAAOjC,EAAO1E,GACd4G,EAAO5B,EAAO5E,GAEdyG,EAAY5C,EAAae,EAAO5E,GAEtC,OACI,cAAC0G,EAAA,EAAD,CAEI9G,EAAG2G,EACHvG,EAAGwG,EACHxF,MARS,EAST8B,OAAQ2D,EACRnE,QAAS,GACT9C,KAAM8G,GAPV,UACYD,EADZ,YACwBzG,UAapC0D,GACI,sBACI1D,EAAG6D,EAASb,MACZ5C,EAAGyD,EAASZ,MACZ7B,MAAOyC,EAASzC,MAChB8B,OAAQW,EAASX,OACjBtD,KAAK,OACL8C,QAAS,aE7QnCnB,EAAYC,YAAW,CACzBC,UAAW,CACPsF,QAAS,QAEbC,WAAY,CACRC,WAAY,OACZC,cAAe,QAEnBC,gBAAiB,CACbjG,QAAS,OACTQ,eAAgB,SAChBN,MAAO,QAEXgG,aAAc,CACVlG,QAAS,OACTQ,eAAgB,SAChBN,MAAO,QAGXiG,YAAa,CACTC,aAAc,MACd9E,OAAQ,oBACRI,OAAQ,MACRmE,QAAS,MACT3F,MAAO,OACP,UAAW,CACPqB,gBAAiB,cA2Fd8E,EAzEmB,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YACpE9F,EAAUP,EAAU,IACpBsG,EAAiB,SAACC,GAAD,OAAgBH,EAAcI,MAAK,SAAAC,GAAU,OAAIA,IAAeF,MAoDvF,OACI,sBAAK/F,UAAWD,EAAQL,UAAxB,UACI,qBAAKM,UAAWD,EAAQkF,WAAxB,SACI,cAAC7E,EAAA,EAAD,CAAY8F,QAAQ,YAApB,SACI,4BAAIT,EAAU7G,gBAGtB,kCAxDJ,+BACI,6BACI,qBAAKoB,UAAWD,EAAQqF,gBAAxB,uBAIHM,EAAQ5H,KAAI,SAAAqI,GAAG,OACZ,6BACI,qBAAKnG,UAAWD,EAAQqF,gBAAxB,SACI,cAAChF,EAAA,EAAD,CAAYgG,QAAM,EAAlB,SACKD,cAgDZR,EAAK7H,KAAI,SAAAuI,GACN,IAzCAC,EAyCMzH,EAAQ4G,EAAU5G,MAAM0H,QAAO,SAAAtH,GAAI,OAAIA,EAAKF,UAAYsH,KAE9D,OA3CAC,EA2CczH,EA1C1B,+BAEQ,6BACI,qBAAKmB,UAAWD,EAAQsF,aAAxB,SACKiB,EAAM,GAAGvH,YAKlBuH,EAAMxI,KAAI,SAACS,GACP,IAAMwH,EAAE,UAAMN,EAAU7G,UAAhB,YAA6BL,EAAKO,KAAlC,YAA0CP,EAAKQ,SAEvD,OACI,6BACI,qBACIiB,UAAWD,EAAQuF,YACnBkB,MAAOV,EAAeC,GAAM,CAACrF,gBAAgB,GAAD,OAAKnC,EAAKE,QAAW,GACjE0B,QAAS0F,EAAYE,GAHzB,oCChFtBvG,EAAYC,YAAW,CACzBC,UAAW,CACPP,QAAS,OACTsH,cAAe,SACfC,WAAY,SACZvF,OAAQ,OACR6D,QAAS,OAEb2B,cAAe,CACXxH,QAAS,OACTsH,cAAe,SACftF,OAAO,eAAD,OAAiBP,IAAjB,OACNgG,UAAW,UAEfC,mBAAoB,CAChB1H,QAAS,OACTQ,eAAgB,SAChB+G,WAAY,SACZjG,OAAQ,oBACRU,OAAQP,IACRvB,MHMmB,OGuHZyH,EAvHc,WACzB,IAAM/G,EAAUP,EAAU,IADK,EAEGkC,mBAA+B,IAFlC,mBAExBqF,EAFwB,KAEbC,EAFa,OAGWtF,mBAAmB,IAH9B,mBAGxBkE,EAHwB,KAGTqB,EAHS,KAOzBC,EAAc,SAACnB,GAAD,OAAgB,YAFb,SAACA,GAAD,OAAgBH,EAAcI,MAAK,SAAAC,GAAU,OAAIA,IAAeF,KAG/ED,CAAeC,GAGfkB,GAAiB,SAAAE,GAAY,4BAAQA,GAAR,CAAsBpB,OAFnDkB,GAAiB,SAAAE,GAAY,OAAIA,EAAaZ,QAAO,SAAAN,GAAU,OAAIA,IAAeF,UAiB1FqB,qBAAU,WACN,IAAM/F,EAAWuE,EACZzD,QAAO,SAACd,EAAUgG,GACf,IAAMN,EAdG,SAACO,GAAoB,IAAD,IACNA,EAAOC,MAAM,KADP,mBAC9BvI,EAD8B,KACvBF,EADuB,KACjBC,EADiB,KAQrC,OALU,UAAGJ,EACR6I,MAAK,SAAAC,GAAS,OAAIA,EAAU7I,YAAcI,YADrC,aAAG,EAEPH,MACD2I,MAAK,SAAAE,GAAS,OAAIA,EAAU5I,OAASA,GAAQ4I,EAAU3I,UAAYA,KAQ9C4I,CAAaN,GAE/B,OAAIN,EACM,GAAN,mBAAW1F,GAAX,CAAqB0F,IAGlB1F,IACR,IAEP2F,EAAa,CAAC3F,MACf,CAACuE,IAEJ,IAAMgC,EAAoB,SAACb,GAAD,OAAqCA,EAAUA,EAAUc,OAAS,IAAM,IA0B5FC,EAAYf,EAAUc,OAAS,GAAKd,EAAUf,MAAK,SAAA3E,GAAQ,OAAIA,EAASwG,OAAS,KAEvF,OACI,sBAAK7H,UAAWD,EAAQL,UAAxB,UAEQoI,GACI,cAAC,EAAD,CACIjI,eAbG,WACfkH,EAAUc,OAAS,GACnBb,GAAa,SAAAe,GAAS,OAAIA,EAAUC,MAAM,EAAGD,EAAUF,OAAS,OAYpD/H,cAlBE,WAClBkH,GAAa,SAAAe,GAAS,OAAIA,EAAUC,MAAM,EAAG,SAsBrCF,GACI,cAAC,EAAD,CACIzG,SAAUuG,EAAkBb,GAC5BzF,WAxCD,SAAC,GAAgD,IAA9Ce,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,KAAME,EAAiC,EAAjCA,KAExByF,EADaL,EAAkBb,GAEhCjJ,KAAI,SAAAS,GAAI,kCACFA,GADE,IAELC,KAAMD,EACDC,KACA+H,QAAO,gBAAGtI,EAAH,EAAGA,EAAH,OAAWA,GAAKoE,GAAQpE,GAAKqE,KACpCxE,KAAI,gBAAGG,EAAH,EAAGA,EAAGI,EAAN,EAAMA,EAAN,MAAe,CAAEJ,IAAGI,EAAGA,EAAImE,EAAOA,EAAOnE,WAG1D2I,GAAa,SAAAe,GAAS,4BAAQA,GAAR,aAAuBE,YAkCpCH,GACG,qBAAK9H,UAAWD,EAAQ8G,mBAAxB,0FAMJ,qBAAK7G,UAAWD,EAAQ4G,cAAxB,SAEQhI,EAASb,KAAI,SAAA2J,GAET,IAAM/B,EAAU,IAAIwC,IAAIT,EAAU5I,MAAMf,KAAI,SAAAmB,GAAI,OAAIA,EAAKH,SACnD6G,EAAO,IAAIuC,IAAIT,EAAU5I,MAAMf,KAAI,SAAAmB,GAAI,OAAIA,EAAKF,YAEtD,OACI,cAACoJ,EAAD,CACI1C,UAAWgC,EACX/B,QAAS9H,MAAMwK,KAAK1C,GACpBC,KAAM/H,MAAMwK,KAAKzC,GACjBC,cAAeA,EACfC,YAAaqB,aCtIlCmB,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bc1b7040.chunk.js","sourcesContent":["import { DataPoint } from '../components/Visualiser/Graph'\n\nfunction getMockData(nPoints: number): DataPoint[] {\n    return Array(nPoints).fill(1).map((_, i) => {\n        const x = i + 1\n\n        if (Math.floor(Math.random() * 100) < 10) {\n            const y = Math.floor(Math.random() * 200)\n\n            return { x, y }\n        }\n\n        return { x, y: 0 }\n    })\n\n\n}\n\nexport default getMockData\n","import getMockData from './getMockData'\nimport { DataPoint } from '../components/Visualiser/Graph'\nimport getRandomHexColor from '../utils/getRandomColor'\n\nexport interface Pmaa {\n    name: string\n    linkage: string\n    data: DataPoint[]\n    color: string\n}\n\nfunction addDataSetAndColor(pmaa: Pick<Pmaa, 'name' | 'linkage'>) {\n    const data = getMockData(200)\n    const color = getRandomHexColor()\n\n\n    return { ...pmaa, data, color }\n}\n\nconst pmaas = [\n    {\n        groupName: 'Non-Branched Hexopyranosyl Residues ',\n        items: [\n            { name: 'Galp', linkage: 'T'},\n            { name: 'Glcp', linkage: 'T'},\n            { name: 'Manp', linkage: 'T'},\n            { name: 'Fucp', linkage: 'T'},\n            { name: 'Rhap', linkage: 'T'},\n            { name: 'GalpNAc', linkage: 'T'},\n            { name: 'GlcpNAc', linkage: 'T'},\n            { name: 'ManpNAc', linkage: 'T'},\n            { name: 'Galp', linkage: '2'},\n            { name: 'Glcp', linkage: '2'},\n            { name: 'Manp', linkage: '2'},\n            { name: 'Fucp', linkage: '2'},\n            { name: 'Rhap', linkage: '2'},\n            { name: 'GalpNAc', linkage: '2'},\n            { name: 'GlcpNAc', linkage: '2'},\n            { name: 'ManpNAc', linkage: '2'},\n            { name: 'Galp', linkage: '3'},\n            { name: 'Glcp', linkage: '3'},\n            { name: 'Manp', linkage: '3'},\n            { name: 'Fucp', linkage: '3'},\n            { name: 'Rhap', linkage: '3'},\n            { name: 'GalpNAc', linkage: '3'},\n            { name: 'GlcpNAc', linkage: '3'},\n            { name: 'ManpNAc', linkage: '3'},\n            { name: 'Galp', linkage: '4'},\n            { name: 'Glcp', linkage: '4'},\n            { name: 'Manp', linkage: '4'},\n            { name: 'Fucp', linkage: '4'},\n            { name: 'Rhap', linkage: '4'},\n            { name: 'GalpNAc', linkage: '4'},\n            { name: 'GlcpNAc', linkage: '4'},\n            { name: 'ManpNAc', linkage: '4'},\n            { name: 'Galp', linkage: '6'},\n            { name: 'Glcp', linkage: '6'},\n            { name: 'Manp', linkage: '6'},\n            { name: 'Fucp', linkage: '6'},\n            { name: 'Rhap', linkage: '6'},\n            { name: 'GalpNAc', linkage: '6'},\n            { name: 'GlcpNAc', linkage: '6'},\n            { name: 'ManpNAc', linkage: '6'},\n        ]\n    },{\n        groupName: 'Singly Branched Hexopyranosyl Residues',\n        items: [\n            { name: 'Galp', linkage: '2,3'},\n            { name: 'Glcp', linkage: '2,3'},\n            { name: 'Manp', linkage: '2,3'},\n            { name: 'Fucp', linkage: '2,3'},\n            { name: 'Rhap', linkage: '2,3'},\n            { name: 'GalpNAc', linkage: '2,3'},\n            { name: 'GlcpNAc', linkage: '2,3'},\n            { name: 'ManpNAc', linkage: '2,3'},\n            { name: 'Galp', linkage: '2,4'},\n            { name: 'Glcp', linkage: '2,4'},\n            { name: 'Manp', linkage: '2,4'},\n            { name: 'Fucp', linkage: '2,4'},\n            { name: 'Rhap', linkage: '2,4'},\n            { name: 'GalpNAc', linkage: '2,4'},\n            { name: 'GlcpNAc', linkage: '2,4'},\n            { name: 'ManpNAc', linkage: '2,4'},\n            { name: 'Galp', linkage: '2,6'},\n            { name: 'Glcp', linkage: '2,6'},\n            { name: 'Manp', linkage: '2,6'},\n            { name: 'Fucp', linkage: '2,6'},\n            { name: 'Rhap', linkage: '2,6'},\n            { name: 'GalpNAc', linkage: '2,6'},\n            { name: 'GlcpNAc', linkage: '2,6'},\n            { name: 'ManpNAc', linkage: '2,6'},\n            { name: 'Galp', linkage: '3,4'},\n            { name: 'Glcp', linkage: '3,4'},\n            { name: 'Manp', linkage: '3,4'},\n            { name: 'Fucp', linkage: '3,4'},\n            { name: 'Rhap', linkage: '3,4'},\n            { name: 'GalpNAc', linkage: '3,4'},\n            { name: 'GlcpNAc', linkage: '3,4'},\n            { name: 'ManpNAc', linkage: '3,4'},\n            { name: 'Galp', linkage: '3,6'},\n            { name: 'Glcp', linkage: '3,6'},\n            { name: 'Manp', linkage: '3,6'},\n            { name: 'Fucp', linkage: '3,6'},\n            { name: 'Rhap', linkage: '3,6'},\n            { name: 'GalpNAc', linkage: '3,6'},\n            { name: 'GlcpNAc', linkage: '3,6'},\n            { name: 'ManpNAc', linkage: '3,6'},\n            { name: 'Galp', linkage: '4,6'},\n            { name: 'Glcp', linkage: '4,6'},\n            { name: 'Manp', linkage: '4,6'},\n            { name: 'Fucp', linkage: '4,6'},\n            { name: 'Rhap', linkage: '4,6'},\n            { name: 'GalpNAc', linkage: '4,6'},\n            { name: 'GlcpNAc', linkage: '4,6'},\n            { name: 'ManpNAc', linkage: '4,6'},\n        ],\n    }, {\n        groupName: 'Multiply Branched Hexopyranosyl Residues',\n        items: [\n            { name: 'Galp', linkage: '2,3,4'},\n            { name: 'Glcp', linkage: '2,3,4'},\n            { name: 'Manp', linkage: '2,3,4'},\n            { name: 'Fucp', linkage: '2,3,4'},\n            { name: 'Rhap', linkage: '2,3,4'},\n            { name: 'GalpNAc', linkage: '2,3,4'},\n            { name: 'GlcpNAc', linkage: '2,3,4'},\n            { name: 'ManpNAc', linkage: '2,3,4'},\n            { name: 'Galp', linkage: '2,3,6'},\n            { name: 'Glcp', linkage: '2,3,6'},\n            { name: 'Manp', linkage: '2,3,6'},\n            { name: 'Fucp', linkage: '2,3,6'},\n            { name: 'Rhap', linkage: '2,3,6'},\n            { name: 'GalpNAc', linkage: '2,3,6'},\n            { name: 'GlcpNAc', linkage: '2,3,6'},\n            { name: 'ManpNAc', linkage: '2,3,6'},\n            { name: 'Galp', linkage: '2,4,6'},\n            { name: 'Glcp', linkage: '2,4,6'},\n            { name: 'Manp', linkage: '2,4,6'},\n            { name: 'Fucp', linkage: '2,4,6'},\n            { name: 'Rhap', linkage: '2,4,6'},\n            { name: 'GalpNAc', linkage: '2,4,6'},\n            { name: 'GlcpNAc', linkage: '2,4,6'},\n            { name: 'ManpNAc', linkage: '2,4,6'},\n            { name: 'Galp', linkage: '3,4,6'},\n            { name: 'Glcp', linkage: '3,4,6'},\n            { name: 'Manp', linkage: '3,4,6'},\n            { name: 'Fucp', linkage: '3,4,6'},\n            { name: 'Rhap', linkage: '3,4,6'},\n            { name: 'GalpNAc', linkage: '3,4,6'},\n            { name: 'GlcpNAc', linkage: '3,4,6'},\n            { name: 'ManpNAc', linkage: '3,4,6'},\n        ]\n    }, {\n        groupName: 'Non-Branched Pentopyranosyl and Pentofuranosyl Residues',\n        items: [\n            { name: 'Arap', linkage: 'T'},\n            { name: 'Ribp', linkage: 'T'},\n            { name: 'Xylp', linkage: 'T'},\n            { name: 'Araf', linkage: 'T'},\n            { name: 'Ribf', linkage: 'T'},\n            { name: 'Arap', linkage: '2'},\n            { name: 'Ribp', linkage: '2'},\n            { name: 'Xylp', linkage: '2'},\n            { name: 'Araf', linkage: '2'},\n            { name: 'Ribf', linkage: '2'},\n            { name: 'Arap', linkage: '3'},\n            { name: 'Ribp', linkage: '3'},\n            { name: 'Xylp', linkage: '3'},\n            { name: 'Araf', linkage: '3'},\n            { name: 'Ribf', linkage: '3'},\n            { name: 'Arap', linkage: '4'},\n            { name: 'Ribp', linkage: '4'},\n            { name: 'Xylp', linkage: '4'},\n            { name: 'Araf', linkage: '4'},\n            { name: 'Ribf', linkage: '4'},\n            { name: 'Arap', linkage: '5'},\n            { name: 'Ribp', linkage: '5'},\n            { name: 'Xylp', linkage: '5'},\n            { name: 'Araf', linkage: '5'},\n            { name: 'Ribf', linkage: '5'},\n        ]\n    }, {\n        groupName: 'Branched Pentopyranosyl And Pentofuranosyl Residues',\n        items: [\n            { name: 'Arap', linkage: '2,3'},\n            { name: 'Ribp', linkage: '2,3'},\n            { name: 'Xylp', linkage: '2,3'},\n            { name: 'Araf', linkage: '2,3'},\n            { name: 'Ribf', linkage: '2,3'},\n            { name: 'Arap', linkage: '2,4'},\n            { name: 'Ribp', linkage: '2,4'},\n            { name: 'Xylp', linkage: '2,4'},\n            { name: 'Araf', linkage: '2,4'},\n            { name: 'Ribf', linkage: '2,4'},\n            { name: 'Arap', linkage: '2,5'},\n            { name: 'Ribp', linkage: '2,5'},\n            { name: 'Xylp', linkage: '2,5'},\n            { name: 'Araf', linkage: '2,5'},\n            { name: 'Ribf', linkage: '2,5'},\n            { name: 'Arap', linkage: '3,4'},\n            { name: 'Ribp', linkage: '3,4'},\n            { name: 'Xylp', linkage: '3,4'},\n            { name: 'Araf', linkage: '3,4'},\n            { name: 'Ribf', linkage: '3,4'},\n            { name: 'Arap', linkage: '3,5'},\n            { name: 'Ribp', linkage: '3,5'},\n            { name: 'Xylp', linkage: '3,5'},\n            { name: 'Araf', linkage: '3,5'},\n            { name: 'Ribf', linkage: '3,5'},\n            { name: 'Arap', linkage: '2,3,4'},\n            { name: 'Ribp', linkage: '2,3,4'},\n            { name: 'Xylp', linkage: '2,3,4'},\n            { name: 'Araf', linkage: '2,3,4'},\n            { name: 'Ribf', linkage: '2,3,4'},\n            { name: 'Arap', linkage: '2,3,5'},\n            { name: 'Ribp', linkage: '2,3,5'},\n            { name: 'Xylp', linkage: '2,3,5'},\n            { name: 'Araf', linkage: '2,3,5'},\n            { name: 'Ribf', linkage: '2,3,5'},\n        ]\n    }\n]\n\nexport const pmaaData = pmaas.map((group) => ({\n    ...group,\n    items: group.items.map(item => addDataSetAndColor(item)) as Pmaa[]\n}))\n","export default function getRandomHexColor() {\n    const randomColor = Math.floor(Math.random()*16777215).toString(16)\n\n    return \"#\" + randomColor\n}\n","import React from 'react'\n\nconst Refresh:React.FC = () => (\n    <svg\n        display='block'\n        fill='black'\n        viewBox='0 0 24 24'\n        width={18}\n    >\n        <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"></path>\n    </svg>\n)\n\nexport default Refresh\n","import React from 'react'\n\nconst Back:React.FC = () => (\n    <svg\n        display='block'\n        fill='black'\n        viewBox='0 0 24 24'\n        width={18}\n    >\n        <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"></path>\n    </svg>\n)\n\nexport default Back\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport RefreshIcon from '../icons/Refresh'\nimport BackIcon from '../icons/Back'\n\nexport const ACTION_BUTTONS_HEIGHT = 24\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n    }\n})\n\ninterface Props {\n    onDataZoomBack: () => void\n    onRefreshView: () => void\n}\n\nconst ActionButtons:React.FC<Props> = ({\n    onDataZoomBack,\n    onRefreshView,\n}) => {\n    const classes = useStyles({})\n\n    return (\n        <div className={classes.container}>\n            <IconButton size='small' onClick={onDataZoomBack}>\n                <BackIcon />\n            </IconButton>\n            <Typography>\n                Click and drag to zoom\n            </Typography>\n            <IconButton size='small' onClick={onRefreshView}>\n                <RefreshIcon />\n            </IconButton>\n        </div>\n    )\n}\n\nexport default ActionButtons\n","import React, { useState, useRef } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Bar } from '@vx/shape'\nimport { AxisLeft, AxisBottom } from '@vx/axis'\nimport { Group } from '@vx/group'\nimport { scaleLinear } from '@vx/scale'\n\nimport { getMinMaxOfDataSets, MinMax } from '../../utils/minMax'\nimport { Pmaa } from '../../data/pmaaDetails'\n\nconst useStyles = makeStyles({\n    graphContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    zoomBox: {\n        zIndex: 100,\n        position: 'absolute',\n        border: 'black 1px solid',\n        backgroundColor: 'blue',\n        opacity: 0.4,\n    }\n})\n\n\nexport interface DataPoint {\n    x: number\n    y: number\n}\n\nexport type DataSet = DataPoint[]\n\ninterface Props {\n    dataSets: Pmaa[]\n    onDataZoom: (zoomData: Omit<MinMax, 'minY'>) => void\n}\n\nexport const GRAPH_WIDTH = 750\nexport const GRAPH_HEIGHT = 300\n\nconst margin = {\n    top: 30,\n    bottom: 60,\n    left: 80,\n    right: 80\n}\n\ninterface ZoomData {\n    initialX: number\n    dragX: number\n    rectX: number\n    rectY: number\n    width: number\n    height: number\n}\n\nconst INIITIAL_ZOOM_RECT = {\n    initialX: 0,\n    dragX: 0,\n    rectX: 0,\n    rectY: 0,\n    width: 0,\n    height: 0,\n}\n\nconst Graph: React.FC<Props> = ({ dataSets, onDataZoom }) => {\n    const classes = useStyles({})\n    const data = dataSets.map(dataSet => dataSet.data)\n\n    const graphContainer = useRef<HTMLDivElement>(null)\n\n    // Zoom rectangle\n    const graphSVG = useRef<SVGSVGElement>(null)\n    const [isZooming, setIsZooming] = useState<boolean>(false)\n    const zoomData = useRef<ZoomData>(INIITIAL_ZOOM_RECT)\n    const [zoomRect, setZoomRect] = useState<ZoomData>(INIITIAL_ZOOM_RECT)\n    const requestRef = useRef<number>()\n\n    // Graph bounds\n    const xGraphMax = GRAPH_WIDTH - margin.left - 50\n    const yGraphMax = GRAPH_HEIGHT - margin.top - 50\n\n    // DataSets bounds\n    const { minX, maxX, minY, maxY } = getMinMaxOfDataSets(data)\n\n    const xScale = scaleLinear({\n        domain: [minX, maxX],\n        range: [0, xGraphMax],\n        round: true,\n    })\n\n    const xScaleReverse = scaleLinear({\n        domain: [0, xGraphMax],\n        range: [minX, maxX],\n        round: true,\n    })\n\n    const yScale = scaleLinear({\n        domain: [minY, maxY],\n        range: [yGraphMax, 0],\n        round: true,\n    })\n\n    const yScaleReverse = scaleLinear({\n        domain: [yGraphMax, 0],\n        range: [minY, maxY],\n        round: true,\n    })\n\n    const eventXToGraphX = (x: number, graphContainerOffset: number) => {\n        let graphX = x - margin.left - graphContainerOffset\n\n        if (graphX < 0) {\n            graphX = 0\n        }\n\n        if (graphX > xGraphMax) {\n            graphX = xGraphMax\n        }\n\n        return graphX\n    }\n\n    const eventYToGraphY = (y: number, graphContainerOffset: number) => {\n        let graphY = y - margin.top - graphContainerOffset\n\n        if (graphY < 0) {\n            graphY = 0\n        }\n\n        if (graphY > yGraphMax) {\n            graphY = yGraphMax\n        }\n\n        return graphY\n    }\n\n    const changeZoomRect = () => {\n        let width: number\n        const { dragX, initialX, rectX, rectY } = zoomData.current\n\n        if (dragX < initialX) {\n            width = initialX - rectX\n        } else {\n            width = dragX - initialX\n        }\n\n        const height = yGraphMax - rectY\n\n        zoomData.current = { ...zoomData.current, width }\n        setZoomRect({ ...zoomData.current, width, height })\n    }\n\n    const clearZoomRect = () => {\n        zoomData.current = INIITIAL_ZOOM_RECT\n        setZoomRect(INIITIAL_ZOOM_RECT)\n\n        window.cancelAnimationFrame(requestRef.current as number)\n    }\n\n    const handleGraphClick = ({ clientX, clientY }: React.MouseEvent<HTMLDivElement>) => {\n        if (!graphSVG.current) {\n            return\n        }\n\n        const { left, top } = graphSVG.current.getBoundingClientRect()\n        let graphX = eventXToGraphX(clientX, left)\n        let graphY = eventYToGraphY(clientY, top)\n    \n        if (isZooming) {\n            onDataZoom({\n                minX: xScaleReverse(zoomData.current.rectX) as number,\n                maxX: xScaleReverse(zoomData.current.rectX + zoomData.current.width) as number,\n                maxY: yScaleReverse(zoomData.current.rectY) as number,\n            })\n            setIsZooming(false)\n            clearZoomRect()\n        } else {\n            zoomData.current = {\n                ...zoomData.current,\n                rectX: graphX,\n                rectY: graphY,\n                initialX: graphX,\n            }\n\n            setIsZooming(true)\n        }\n    }\n\n    const handleZoomMove = ({ clientX, clientY }: React.MouseEvent<HTMLDivElement>) => {\n        if (!isZooming) {\n            return\n        }\n\n        if (!graphSVG.current) {\n            return\n        }\n\n        const { left, top } = graphSVG.current.getBoundingClientRect()\n        let graphX = eventXToGraphX(clientX, left)\n        let graphY = eventYToGraphY(clientY, top)\n        \n        if (graphX < zoomData.current.initialX) {\n            zoomData.current = {\n                ...zoomData.current,\n                rectX: graphX,\n                dragX: graphX,\n            }\n        } else {\n            zoomData.current = {\n                ...zoomData.current,\n                rectX: zoomData.current.initialX,\n                dragX: graphX,\n            }\n        }\n\n        zoomData.current = {\n            ...zoomData.current,\n            rectY: graphY,\n        }\n\n        requestRef.current = requestAnimationFrame(changeZoomRect)\n    }\n\n    return (\n        <div\n            ref={graphContainer}\n            className={classes.graphContainer}\n            onClick={handleGraphClick}\n            onMouseMove={handleZoomMove}\n        >\n            <svg ref={graphSVG} height={GRAPH_HEIGHT} width={GRAPH_WIDTH}>\n                <Group top={margin.top} left={margin.left}>\n                    <AxisLeft\n                        scale={yScale}\n                        top={0}\n                        left={0}\n                        label={'y label'}\n                        stroke={'#1b1a1e'}\n                    />\n                    <AxisBottom\n                        scale={xScale}\n                        top={yGraphMax}\n                        label={'x label'}\n                        stroke={'#1b1a1e'}\n                    />\n                    {\n                        dataSets.map((dataSet, setIndex) => {\n                            const barColor = dataSet.color\n                            \n                            return dataSet.data.map(({ x, y }) => {\n                                const barX = xScale(x)\n                                const barY = yScale(y)\n                                const barWidth = 2\n                                const barHeight = yGraphMax - (yScale(y) as number)\n\n                                return (\n                                    <Bar\n                                        key={`${setIndex}-${x}`}\n                                        x={barX}\n                                        y={barY}\n                                        width={barWidth}\n                                        height={barHeight}\n                                        opacity={0.6}\n                                        fill={barColor}\n                                    />\n                                )\n                            })}\n                        )\n                    }\n                    {\n                        isZooming && (\n                            <rect\n                                x={zoomRect.rectX}\n                                y={zoomRect.rectY}\n                                width={zoomRect.width}\n                                height={zoomRect.height}\n                                fill='blue'\n                                opacity={0.4}\n                            />\n                        )\n                    }\n                </Group>\n            </svg>\n        </div>\n    )\n}\n\nexport default Graph\n","import { DataPoint } from '../components/Visualiser/Graph'\n\nexport interface MinMax {\n    minX: number\n    maxX: number\n    minY: number\n    maxY: number\n}\n\nexport function getMinMax(data: DataPoint[]): MinMax {\n    return data.reduce(({ minX, maxX, minY, maxY }, { x, y }) => {\n        const newMinX = x < minX ? x : minX\n        const newMaxX = x > maxX ? x : maxX\n        const newMinY = y < minY ? y : minY\n        const newMaxY = y > maxY ? y : maxY\n\n        return {\n            minX: newMinX,\n            maxX: newMaxX,\n            minY: newMinY,\n            maxY: newMaxY,\n        }\n    }, {\n        minX: Infinity,\n        maxX: -Infinity,\n        minY: Infinity,\n        maxY: -Infinity\n    })\n}\n\nexport function getMinMaxOfDataSets(dataSets: DataPoint[][]): MinMax {\n    const flatData = dataSets.reduce((flatDataSets, dataSet) => [...flatDataSets, ...dataSet], [])\n\n    return getMinMax(flatData)\n}\n","import React, { useState } from 'react'\nimport classnames from 'classnames'\nimport { makeStyles } from '@material-ui/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\n\nimport { Pmaa } from '../../data/pmaaDetails'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles({\n    container: {\n        padding: '10px',\n    },\n    gridHeader: {\n        paddingTop: '10px',\n        paddingBottom: '10px',\n    },\n    columnTitleItem: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '80px'\n    },\n    rowtitleItem: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '80px'\n\n    },\n    contentItem: {\n        borderRadius: '6px',\n        border: '1px solid #d3d3d3',\n        margin: '2px',\n        padding: '1px',\n        width: '80px',\n        \"&:hover\": {\n            backgroundColor: '#d3d3d3',\n        },\n    },\n})\n\ninterface PmaaGroup {\n    groupName: string\n    items: Pmaa[]\n}\n\ninterface Props {\n    pmaaGroup: PmaaGroup\n    columns: string[]\n    rows: string[]\n    selectedPmaas: string[]\n    onPmaaClick: (id: string) => () => void\n}\n\nconst PmaaList: React.FC<Props> = ({ pmaaGroup, columns, rows, selectedPmaas, onPmaaClick }) => {\n    const classes = useStyles({})\n    const isPmaaSelected = (id: string) => selectedPmaas.some(selectedId => selectedId === id)\n\n    const getHeader = () => (\n        <tr>\n            <th>\n                <div className={classes.columnTitleItem}>\n                    Linkage\n                </div>\n            </th>\n            {columns.map(col => (\n                <th>\n                    <div className={classes.columnTitleItem}>\n                        <Typography noWrap>\n                            {col}\n                        </Typography>\n                    </div>\n                </th>\n            ))}\n        </tr>\n    )\n\n    const getRow = (pmaas: Pmaa[]) =>  (\n        <tr>\n            {\n                <td>\n                    <div className={classes.rowtitleItem}>\n                        {pmaas[0].linkage}\n                    </div>\n                </td>\n            }\n            {\n                pmaas.map((pmaa) => {\n                    const id = `${pmaaGroup.groupName}:${pmaa.name}:${pmaa.linkage}`\n\n                    return (\n                        <td>\n                            <div\n                                className={classes.contentItem}\n                                style={isPmaaSelected(id) ? {backgroundColor: `${pmaa.color}`} : {}}\n                                onClick={onPmaaClick(id)}\n                            >\n                                &nbsp;\n                            </div>\n                        </td>\n                        )\n                    }\n                )\n            }\n        </tr>\n    )\n    \n\n    return (\n        <div className={classes.container}>\n            <div className={classes.gridHeader}>\n                <Typography variant='subtitle1'>\n                    <b>{pmaaGroup.groupName}</b>\n                </Typography>\n            </div>\n            <table>\n                {getHeader()}\n                {rows.map(row => {\n                    const items = pmaaGroup.items.filter(item => item.linkage === row)\n\n                    return getRow(items)\n                })}\n            </table>\n        </div>\n    )\n}\n\nexport default PmaaList\n","import React, { useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/styles'\n\nimport { MinMax } from '../../utils/minMax'\n\nimport { pmaaData, Pmaa } from '../../data/pmaaDetails'\n\nimport ActionButtons, { ACTION_BUTTONS_HEIGHT } from './ActionButtons'\nimport Graph, { GRAPH_HEIGHT, GRAPH_WIDTH } from './Graph'\nimport PmaaGrid from './PmaaGrid'\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        height: '100%',\n        padding: '5px',\n    },\n    gridContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: `calc(100% - ${GRAPH_HEIGHT + ACTION_BUTTONS_HEIGHT}px)`,\n        overflowY: 'scroll',\n    },\n    emptyTextContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        border: '0.5px dashed grey',\n        height: GRAPH_HEIGHT + ACTION_BUTTONS_HEIGHT,\n        width: GRAPH_WIDTH,\n    }\n})\n\ntype DataSetZoomHistory = Pmaa[]\n\nconst Visualiser: React.FC = () => {\n    const classes = useStyles({})\n    const [graphData, setGraphData] = useState<DataSetZoomHistory[]>([])\n    const [selectedPmaas, setSelectedPmaas] = useState<string[]>([])\n\n    const isPmaaSelected = (id: string) => selectedPmaas.some(selectedId => selectedId === id)\n  \n    const onItemClick = (id: string) => () => {\n        if (isPmaaSelected(id)) {\n            setSelectedPmaas(prevSelected => prevSelected.filter(selectedId => selectedId !== id))\n        } else {\n            setSelectedPmaas(prevSelected => [...prevSelected, id])\n        }\n    }\n\n    const getGraphData = (pmaaId: string) => {\n        const [group, name, linkage] = pmaaId.split(':')\n\n        const data = pmaaData\n            .find(groupData => groupData.groupName === group)\n            ?.items\n            .find(groupItem => groupItem.name === name && groupItem.linkage === linkage)\n\n        return data\n    }\n\n    useEffect(() => {\n        const dataSets = selectedPmaas\n            .reduce((dataSets, selectedPmaaId) => {\n                const graphData = getGraphData(selectedPmaaId)\n\n                if (graphData) {\n                    return [...dataSets, graphData]\n                }\n\n                return dataSets\n            }, [] as Pmaa[])\n\n        setGraphData([dataSets])\n    }, [selectedPmaas])\n    \n    const getLatestZoomData = (graphData: DataSetZoomHistory[]) => graphData[graphData.length - 1] || []\n\n    const onDataZoom = ({ minX, maxX, maxY }: Omit<MinMax, 'minY'>) => {\n        const latestData = getLatestZoomData(graphData)\n        const newData = latestData\n            .map(pmaa => ({\n                ...pmaa,\n                data: pmaa\n                    .data\n                    .filter(({ x }) => x >= minX && x <= maxX)\n                    .map(({ x, y }) => ({ x, y: y > maxY ? maxY : y }))\n            }))\n        \n        setGraphData(prevState => [...prevState, [...newData]])\n    }\n\n    const onRefreshView = () => {\n        setGraphData(prevState => prevState.slice(0, 1))\n    }\n\n    const onDataZoomBack = () => {\n        if (graphData.length > 1) {\n            setGraphData(prevState => prevState.slice(0, prevState.length - 1))\n        }\n    }\n\n    const showGraph = graphData.length > 0 && graphData.some(dataSets => dataSets.length > 0)\n\n    return (\n        <div className={classes.container}>\n            {\n                showGraph && (\n                    <ActionButtons\n                        onDataZoomBack={onDataZoomBack}\n                        onRefreshView={onRefreshView}\n                    />\n                )\n            }\n            {\n                showGraph && (\n                    <Graph\n                        dataSets={getLatestZoomData(graphData)}\n                        onDataZoom={onDataZoom}\n                    />\n                )\n            }\n            {\n                !showGraph && (\n                    <div className={classes.emptyTextContainer}>\n                        Click any number of PMAAs to see their electron-impact mass spectrum (EI-MS)\n                    </div>\n                )\n            }\n            {\n                <div className={classes.gridContainer}>\n                    {\n                        pmaaData.map(groupData => {\n        \n                            const columns = new Set(groupData.items.map(item => item.name))\n                            const rows = new Set(groupData.items.map(item => item.linkage))\n        \n                            return (\n                                <PmaaGrid\n                                    pmaaGroup={groupData}\n                                    columns={Array.from(columns)}\n                                    rows={Array.from(rows)}\n                                    selectedPmaas={selectedPmaas}\n                                    onPmaaClick={onItemClick}\n                                />\n                            )\n                        })\n                    }\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Visualiser\n","import React from 'react'\n\nimport Visualiser from './components/Visualiser'\n\n\nfunction App() {\n  return (\n    <Visualiser />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}