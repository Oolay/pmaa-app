{"version":3,"sources":["utils/index.ts","data/getMockData.ts","data/pmaaDetails.ts","components/icons/Refresh.tsx","components/icons/Back.tsx","components/icons/Clear.tsx","components/Visualiser/ActionButtons.tsx","components/Visualiser/Graph.tsx","components/Visualiser/PmaaGrid.tsx","components/Visualiser/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["replacePmaa","pmaas","newPmaa","map","pmaa","name","linkage","isSamePmaa","pmaa1","pmaa2","getRandomHexColor","Math","floor","random","toString","PRIMARY_TEXT_COLOR","getMockData","nPoints","Array","fill","_","i","x","y","pmaaData","groupName","items","group","item","data","color","addDataSetAndColor","RefreshIcon","display","viewBox","width","d","BackIcon","ClearIcon","useStyles","makeStyles","container","justifyContent","flexDirection","alignItems","actionContainer","ActionButtons","onDataZoomBack","onRefreshView","onClearView","classes","className","Typography","IconButton","size","onClick","graphContainer","zoomBox","zIndex","position","border","backgroundColor","opacity","GRAPH_MARGIN","INIITIAL_ZOOM_RECT","initialX","dragX","rectX","rectY","height","Graph","dataSets","onDataZoom","dataSet","useRef","graphSVG","useState","isZooming","setIsZooming","zoomData","zoomRect","setZoomRect","requestRef","xGraphMax","yGraphMax","reduce","flatDataSets","minX","maxX","minY","maxY","Infinity","getMinMaxOfDataSets","xScale","scaleLinear","domain","range","round","xScaleReverse","yScale","yScaleReverse","eventXToGraphX","graphContainerOffset","graphX","eventYToGraphY","graphY","changeZoomRect","current","ref","clientX","clientY","getBoundingClientRect","left","top","window","cancelAnimationFrame","onMouseMove","requestAnimationFrame","Group","AxisLeft","scale","stroke","AxisBottom","setIndex","barColor","barX","barY","barHeight","Bar","padding","gridHeader","paddingTop","paddingBottom","columnTitleItem","rowtitleItem","contentItem","borderRadius","margin","PmaaList","pmaaGroup","columns","rows","selectedPmaas","onPmaaClick","variant","col","noWrap","row","filter","style","selectedPmaa","some","GRAPH_CONTAINER_HEIGHT","GRAPH_HEIGHT","marginTop","gridContainer","overflowY","emptyTextContainer","flex","legendContainer","textAlign","fontSize","overflowy","legendItem","Visualiser","graphData","setGraphData","setSelectedPmaas","rawPmaaData","setRawPmaaData","handleItemClick","isPmaaSelected","prevSelected","useEffect","getLatestZoomData","length","handlePmaaColorChange","prevRawData","showGraph","prevState","slice","newData","backgroundHexColor","test","parseInt","substr","groupData","Set","PmaaGrid","from","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0711fc7a.chunk.js","sourcesContent":["import { DataPoint } from '../components/Visualiser/Graph'\nimport { Pmaa } from '../data/pmaaDetails'\n\nexport const replacePmaa = (pmaas: Pmaa[], newPmaa: Pmaa) => (\n    pmaas.map(\n        pmaa => newPmaa.name === pmaa.name && newPmaa.linkage === pmaa.linkage\n            ? newPmaa\n            : pmaa\n        )\n)\n\nexport const isSamePmaa = (pmaa1: Pmaa, pmaa2: Pmaa) => (\n    pmaa1.name === pmaa2.name && pmaa1.linkage === pmaa2.linkage\n)\n\nexport function getRandomHexColor(): string {\n    const randomColor = Math.floor(Math.random()*16777215).toString(16)\n\n    return \"#\" + randomColor\n}\n\nconst PRIMARY_TEXT_COLOR = '#434343'\nconst WHITE_TEXT_COLOR = '#FFFFFF'\n\n\nfunction isHexColor(color : string) {\n    return /^#([A-Fa-f0-9]{6}$)/.test(color)\n}\n\nexport function getStatusTextColor(backgroundHexColor : string) {\n    // default to black if invalid colour used\n    if (!isHexColor(backgroundHexColor)) {\n        return PRIMARY_TEXT_COLOR\n    }\n\n    const red = parseInt(backgroundHexColor.substr(1, 2), 16)\n    const green = parseInt(backgroundHexColor.substr(3, 2), 16)\n    const blue = parseInt(backgroundHexColor.substr(5, 2), 16)\n\n    // convert rgb colour to YIQ color space - see https://24ways.org/2010/calculating-color-contrast\n    const yiq = ((red * 299) + (green * 587) + (blue * 114)) / 1000\n\n    return yiq >= 128 ? PRIMARY_TEXT_COLOR : WHITE_TEXT_COLOR\n}\nexport interface MinMax {\n    minX: number\n    maxX: number\n    minY: number\n    maxY: number\n}\n\nexport function getMinMax(data: DataPoint[]): MinMax {\n    return data.reduce(({ minX, maxX, minY, maxY }, { x, y }) => {\n        const newMinX = x < minX ? x : minX\n        const newMaxX = x > maxX ? x : maxX\n        const newMinY = y < minY ? y : minY\n        const newMaxY = y > maxY ? y : maxY\n\n        return {\n            minX: newMinX,\n            maxX: newMaxX,\n            minY: newMinY,\n            maxY: newMaxY,\n        }\n    }, {\n        minX: Infinity,\n        maxX: -Infinity,\n        minY: Infinity,\n        maxY: -Infinity\n    })\n}\n\nexport function getMinMaxOfDataSets(dataSets: DataPoint[][]): MinMax {\n    const flatData = dataSets.reduce((flatDataSets, dataSet) => [...flatDataSets, ...dataSet], [])\n\n    return getMinMax(flatData)\n}\n","import { DataPoint } from '../components/Visualiser/Graph'\n\nfunction getMockData(nPoints: number): DataPoint[] {\n    return Array(nPoints).fill(1).map((_, i) => {\n        const x = i + 1\n\n        if (Math.floor(Math.random() * 100) < 10) {\n            const y = Math.floor(Math.random() * 200)\n\n            return { x, y }\n        }\n\n        return { x, y: 0 }\n    })\n\n\n}\n\nexport default getMockData\n","import getMockData from './getMockData'\nimport { DataPoint } from '../components/Visualiser/Graph'\nimport { getRandomHexColor } from '../utils'\n\nexport interface Pmaa {\n    groupName: string\n    name: string\n    linkage: string\n    data: DataPoint[]\n    color: string\n}\n\nfunction addDataSetAndColor(pmaa: Pick<Pmaa, 'name' | 'linkage'>) {\n    const data = getMockData(200)\n    const color = getRandomHexColor()\n\n\n    return { ...pmaa, data, color }\n}\n\nconst pmaas = [\n    {\n        groupName: 'Non-Branched Hexopyranosyl Residues ',\n        items: [\n            { name: 'Galp', linkage: 'T'},\n            { name: 'Glcp', linkage: 'T'},\n            { name: 'Manp', linkage: 'T'},\n            { name: 'Fucp', linkage: 'T'},\n            { name: 'Rhap', linkage: 'T'},\n            { name: 'GalpNAc', linkage: 'T'},\n            { name: 'GlcpNAc', linkage: 'T'},\n            { name: 'ManpNAc', linkage: 'T'},\n            { name: 'Galp', linkage: '2'},\n            { name: 'Glcp', linkage: '2'},\n            { name: 'Manp', linkage: '2'},\n            { name: 'Fucp', linkage: '2'},\n            { name: 'Rhap', linkage: '2'},\n            { name: 'GalpNAc', linkage: '2'},\n            { name: 'GlcpNAc', linkage: '2'},\n            { name: 'ManpNAc', linkage: '2'},\n            { name: 'Galp', linkage: '3'},\n            { name: 'Glcp', linkage: '3'},\n            { name: 'Manp', linkage: '3'},\n            { name: 'Fucp', linkage: '3'},\n            { name: 'Rhap', linkage: '3'},\n            { name: 'GalpNAc', linkage: '3'},\n            { name: 'GlcpNAc', linkage: '3'},\n            { name: 'ManpNAc', linkage: '3'},\n            { name: 'Galp', linkage: '4'},\n            { name: 'Glcp', linkage: '4'},\n            { name: 'Manp', linkage: '4'},\n            { name: 'Fucp', linkage: '4'},\n            { name: 'Rhap', linkage: '4'},\n            { name: 'GalpNAc', linkage: '4'},\n            { name: 'GlcpNAc', linkage: '4'},\n            { name: 'ManpNAc', linkage: '4'},\n            { name: 'Galp', linkage: '6'},\n            { name: 'Glcp', linkage: '6'},\n            { name: 'Manp', linkage: '6'},\n            { name: 'Fucp', linkage: '6'},\n            { name: 'Rhap', linkage: '6'},\n            { name: 'GalpNAc', linkage: '6'},\n            { name: 'GlcpNAc', linkage: '6'},\n            { name: 'ManpNAc', linkage: '6'},\n        ]\n    },{\n        groupName: 'Singly Branched Hexopyranosyl Residues',\n        items: [\n            { name: 'Galp', linkage: '2,3'},\n            { name: 'Glcp', linkage: '2,3'},\n            { name: 'Manp', linkage: '2,3'},\n            { name: 'Fucp', linkage: '2,3'},\n            { name: 'Rhap', linkage: '2,3'},\n            { name: 'GalpNAc', linkage: '2,3'},\n            { name: 'GlcpNAc', linkage: '2,3'},\n            { name: 'ManpNAc', linkage: '2,3'},\n            { name: 'Galp', linkage: '2,4'},\n            { name: 'Glcp', linkage: '2,4'},\n            { name: 'Manp', linkage: '2,4'},\n            { name: 'Fucp', linkage: '2,4'},\n            { name: 'Rhap', linkage: '2,4'},\n            { name: 'GalpNAc', linkage: '2,4'},\n            { name: 'GlcpNAc', linkage: '2,4'},\n            { name: 'ManpNAc', linkage: '2,4'},\n            { name: 'Galp', linkage: '2,6'},\n            { name: 'Glcp', linkage: '2,6'},\n            { name: 'Manp', linkage: '2,6'},\n            { name: 'Fucp', linkage: '2,6'},\n            { name: 'Rhap', linkage: '2,6'},\n            { name: 'GalpNAc', linkage: '2,6'},\n            { name: 'GlcpNAc', linkage: '2,6'},\n            { name: 'ManpNAc', linkage: '2,6'},\n            { name: 'Galp', linkage: '3,4'},\n            { name: 'Glcp', linkage: '3,4'},\n            { name: 'Manp', linkage: '3,4'},\n            { name: 'Fucp', linkage: '3,4'},\n            { name: 'Rhap', linkage: '3,4'},\n            { name: 'GalpNAc', linkage: '3,4'},\n            { name: 'GlcpNAc', linkage: '3,4'},\n            { name: 'ManpNAc', linkage: '3,4'},\n            { name: 'Galp', linkage: '3,6'},\n            { name: 'Glcp', linkage: '3,6'},\n            { name: 'Manp', linkage: '3,6'},\n            { name: 'Fucp', linkage: '3,6'},\n            { name: 'Rhap', linkage: '3,6'},\n            { name: 'GalpNAc', linkage: '3,6'},\n            { name: 'GlcpNAc', linkage: '3,6'},\n            { name: 'ManpNAc', linkage: '3,6'},\n            { name: 'Galp', linkage: '4,6'},\n            { name: 'Glcp', linkage: '4,6'},\n            { name: 'Manp', linkage: '4,6'},\n            { name: 'Fucp', linkage: '4,6'},\n            { name: 'Rhap', linkage: '4,6'},\n            { name: 'GalpNAc', linkage: '4,6'},\n            { name: 'GlcpNAc', linkage: '4,6'},\n            { name: 'ManpNAc', linkage: '4,6'},\n        ],\n    }, {\n        groupName: 'Multiply Branched Hexopyranosyl Residues',\n        items: [\n            { name: 'Galp', linkage: '2,3,4'},\n            { name: 'Glcp', linkage: '2,3,4'},\n            { name: 'Manp', linkage: '2,3,4'},\n            { name: 'Fucp', linkage: '2,3,4'},\n            { name: 'Rhap', linkage: '2,3,4'},\n            { name: 'GalpNAc', linkage: '2,3,4'},\n            { name: 'GlcpNAc', linkage: '2,3,4'},\n            { name: 'ManpNAc', linkage: '2,3,4'},\n            { name: 'Galp', linkage: '2,3,6'},\n            { name: 'Glcp', linkage: '2,3,6'},\n            { name: 'Manp', linkage: '2,3,6'},\n            { name: 'Fucp', linkage: '2,3,6'},\n            { name: 'Rhap', linkage: '2,3,6'},\n            { name: 'GalpNAc', linkage: '2,3,6'},\n            { name: 'GlcpNAc', linkage: '2,3,6'},\n            { name: 'ManpNAc', linkage: '2,3,6'},\n            { name: 'Galp', linkage: '2,4,6'},\n            { name: 'Glcp', linkage: '2,4,6'},\n            { name: 'Manp', linkage: '2,4,6'},\n            { name: 'Fucp', linkage: '2,4,6'},\n            { name: 'Rhap', linkage: '2,4,6'},\n            { name: 'GalpNAc', linkage: '2,4,6'},\n            { name: 'GlcpNAc', linkage: '2,4,6'},\n            { name: 'ManpNAc', linkage: '2,4,6'},\n            { name: 'Galp', linkage: '3,4,6'},\n            { name: 'Glcp', linkage: '3,4,6'},\n            { name: 'Manp', linkage: '3,4,6'},\n            { name: 'Fucp', linkage: '3,4,6'},\n            { name: 'Rhap', linkage: '3,4,6'},\n            { name: 'GalpNAc', linkage: '3,4,6'},\n            { name: 'GlcpNAc', linkage: '3,4,6'},\n            { name: 'ManpNAc', linkage: '3,4,6'},\n        ]\n    }, {\n        groupName: 'Non-Branched Pentopyranosyl and Pentofuranosyl Residues',\n        items: [\n            { name: 'Arap', linkage: 'T'},\n            { name: 'Ribp', linkage: 'T'},\n            { name: 'Xylp', linkage: 'T'},\n            { name: 'Araf', linkage: 'T'},\n            { name: 'Ribf', linkage: 'T'},\n            { name: 'Arap', linkage: '2'},\n            { name: 'Ribp', linkage: '2'},\n            { name: 'Xylp', linkage: '2'},\n            { name: 'Araf', linkage: '2'},\n            { name: 'Ribf', linkage: '2'},\n            { name: 'Arap', linkage: '3'},\n            { name: 'Ribp', linkage: '3'},\n            { name: 'Xylp', linkage: '3'},\n            { name: 'Araf', linkage: '3'},\n            { name: 'Ribf', linkage: '3'},\n            { name: 'Arap', linkage: '4'},\n            { name: 'Ribp', linkage: '4'},\n            { name: 'Xylp', linkage: '4'},\n            { name: 'Araf', linkage: '4'},\n            { name: 'Ribf', linkage: '4'},\n            { name: 'Arap', linkage: '5'},\n            { name: 'Ribp', linkage: '5'},\n            { name: 'Xylp', linkage: '5'},\n            { name: 'Araf', linkage: '5'},\n            { name: 'Ribf', linkage: '5'},\n        ]\n    }, {\n        groupName: 'Branched Pentopyranosyl And Pentofuranosyl Residues',\n        items: [\n            { name: 'Arap', linkage: '2,3'},\n            { name: 'Ribp', linkage: '2,3'},\n            { name: 'Xylp', linkage: '2,3'},\n            { name: 'Araf', linkage: '2,3'},\n            { name: 'Ribf', linkage: '2,3'},\n            { name: 'Arap', linkage: '2,4'},\n            { name: 'Ribp', linkage: '2,4'},\n            { name: 'Xylp', linkage: '2,4'},\n            { name: 'Araf', linkage: '2,4'},\n            { name: 'Ribf', linkage: '2,4'},\n            { name: 'Arap', linkage: '2,5'},\n            { name: 'Ribp', linkage: '2,5'},\n            { name: 'Xylp', linkage: '2,5'},\n            { name: 'Araf', linkage: '2,5'},\n            { name: 'Ribf', linkage: '2,5'},\n            { name: 'Arap', linkage: '3,4'},\n            { name: 'Ribp', linkage: '3,4'},\n            { name: 'Xylp', linkage: '3,4'},\n            { name: 'Araf', linkage: '3,4'},\n            { name: 'Ribf', linkage: '3,4'},\n            { name: 'Arap', linkage: '3,5'},\n            { name: 'Ribp', linkage: '3,5'},\n            { name: 'Xylp', linkage: '3,5'},\n            { name: 'Araf', linkage: '3,5'},\n            { name: 'Ribf', linkage: '3,5'},\n            { name: 'Arap', linkage: '2,3,4'},\n            { name: 'Ribp', linkage: '2,3,4'},\n            { name: 'Xylp', linkage: '2,3,4'},\n            { name: 'Araf', linkage: '2,3,4'},\n            { name: 'Ribf', linkage: '2,3,4'},\n            { name: 'Arap', linkage: '2,3,5'},\n            { name: 'Ribp', linkage: '2,3,5'},\n            { name: 'Xylp', linkage: '2,3,5'},\n            { name: 'Araf', linkage: '2,3,5'},\n            { name: 'Ribf', linkage: '2,3,5'},\n        ]\n    }\n]\n\nexport const pmaaData = pmaas.map((group) => ({\n    ...group,\n    items: group.items.map(item => ({ ...addDataSetAndColor(item), groupName: group.groupName }))\n}))\n","import React from 'react'\n\nexport const RefreshIcon: React.FC = () => (\n    <svg\n        display='block'\n        fill='black'\n        viewBox='0 0 24 24'\n        width={18}\n    >\n        <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"></path>\n    </svg>\n)\n","import React from 'react'\n\nexport const BackIcon: React.FC = () => (\n    <svg\n        display='block'\n        fill='black'\n        viewBox='0 0 24 24'\n        width={18}\n    >\n        <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"></path>\n    </svg>\n)\n","import React from 'react'\n\nexport const ClearIcon: React.FC = () => (\n    <svg\n        display='block'\n        fill='black'\n        viewBox='0 0 24 24'\n        width={18}\n    >\n        <path d=\"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"></path>\n    </svg>\n)\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport { RefreshIcon } from '../icons/Refresh'\nimport { BackIcon } from '../icons/Back'\nimport { ClearIcon } from '../icons/Clear'\n\n\nexport const ACTION_BUTTONS_HEIGHT = 24\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    actionContainer: {\n\n    }\n})\n\ninterface Props {\n    onDataZoomBack: () => void\n    onRefreshView: () => void\n    onClearView: () => void\n}\n\nconst ActionButtons:React.FC<Props> = ({\n    onDataZoomBack,\n    onRefreshView,\n    onClearView,\n}) => {\n    const classes = useStyles({})\n\n    return (\n        <div className={classes.container}>\n            <Typography>\n                Click and drag to zoom\n            </Typography>\n            <div className={classes.actionContainer}>\n                <IconButton size='small' onClick={onDataZoomBack}>\n                    <BackIcon />\n                </IconButton>\n                <IconButton size='small' onClick={onRefreshView}>\n                    <RefreshIcon />\n                </IconButton>\n                <IconButton size='small' onClick={onClearView}>\n                    <ClearIcon />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default ActionButtons\n","import React, { useState, useRef } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Bar } from '@vx/shape'\nimport { AxisLeft, AxisBottom } from '@vx/axis'\nimport { Group } from '@vx/group'\nimport { scaleLinear } from '@vx/scale'\n\nimport { getMinMaxOfDataSets, MinMax } from '../../utils'\nimport { Pmaa } from '../../data/pmaaDetails'\n\nconst useStyles = makeStyles({\n    graphContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    zoomBox: {\n        zIndex: 100,\n        position: 'absolute',\n        border: 'black 1px solid',\n        backgroundColor: 'blue',\n        opacity: 0.4,\n    }\n})\n\n\nexport interface DataPoint {\n    x: number\n    y: number\n}\n\nexport type DataSet = DataPoint[]\n\ninterface Props {\n    dataSets: Pmaa[]\n    onDataZoom: (zoomData: Omit<MinMax, 'minY'>) => void\n}\n\nexport const GRAPH_WIDTH = 750\nexport const GRAPH_HEIGHT = 300\n\nexport const GRAPH_MARGIN = {\n    top: 30,\n    bottom: 60,\n    left: 80,\n    right: 80\n}\n\ninterface ZoomData {\n    initialX: number\n    dragX: number\n    rectX: number\n    rectY: number\n    width: number\n    height: number\n}\n\nconst INIITIAL_ZOOM_RECT = {\n    initialX: 0,\n    dragX: 0,\n    rectX: 0,\n    rectY: 0,\n    width: 0,\n    height: 0,\n}\n\nconst Graph: React.FC<Props> = ({ dataSets, onDataZoom }) => {\n    const classes = useStyles({})\n    const data = dataSets.map(dataSet => dataSet.data)\n\n    const graphContainer = useRef<HTMLDivElement>(null)\n\n    // Zoom rectangle\n    const graphSVG = useRef<SVGSVGElement>(null)\n    const [isZooming, setIsZooming] = useState<boolean>(false)\n    const zoomData = useRef<ZoomData>(INIITIAL_ZOOM_RECT)\n    const [zoomRect, setZoomRect] = useState<ZoomData>(INIITIAL_ZOOM_RECT)\n    const requestRef = useRef<number>()\n\n    // Graph bounds\n    const xGraphMax = GRAPH_WIDTH - GRAPH_MARGIN.left - 50\n    const yGraphMax = GRAPH_HEIGHT - GRAPH_MARGIN.top - 50\n\n    // DataSets bounds\n    const { minX, maxX, minY, maxY } = getMinMaxOfDataSets(data)\n\n    const xScale = scaleLinear({\n        domain: [minX, maxX],\n        range: [0, xGraphMax],\n        round: true,\n    })\n\n    const xScaleReverse = scaleLinear({\n        domain: [0, xGraphMax],\n        range: [minX, maxX],\n        round: true,\n    })\n\n    const yScale = scaleLinear({\n        domain: [minY, maxY],\n        range: [yGraphMax, 0],\n        round: true,\n    })\n\n    const yScaleReverse = scaleLinear({\n        domain: [yGraphMax, 0],\n        range: [minY, maxY],\n        round: true,\n    })\n\n    const eventXToGraphX = (x: number, graphContainerOffset: number) => {\n        let graphX = x - GRAPH_MARGIN.left - graphContainerOffset\n\n        if (graphX < 0) {\n            graphX = 0\n        }\n\n        if (graphX > xGraphMax) {\n            graphX = xGraphMax\n        }\n\n        return graphX\n    }\n\n    const eventYToGraphY = (y: number, graphContainerOffset: number) => {\n        let graphY = y - GRAPH_MARGIN.top - graphContainerOffset\n\n        if (graphY < 0) {\n            graphY = 0\n        }\n\n        if (graphY > yGraphMax) {\n            graphY = yGraphMax\n        }\n\n        return graphY\n    }\n\n    const changeZoomRect = () => {\n        let width: number\n        const { dragX, initialX, rectX, rectY } = zoomData.current\n\n        if (dragX < initialX) {\n            width = initialX - rectX\n        } else {\n            width = dragX - initialX\n        }\n\n        const height = yGraphMax - rectY\n\n        zoomData.current = { ...zoomData.current, width }\n        setZoomRect({ ...zoomData.current, width, height })\n    }\n\n    const clearZoomRect = () => {\n        zoomData.current = INIITIAL_ZOOM_RECT\n        setZoomRect(INIITIAL_ZOOM_RECT)\n\n        window.cancelAnimationFrame(requestRef.current as number)\n    }\n\n    const handleGraphClick = ({ clientX, clientY }: React.MouseEvent<HTMLDivElement>) => {\n        if (!graphSVG.current) {\n            return\n        }\n\n        const { left, top } = graphSVG.current.getBoundingClientRect()\n        let graphX = eventXToGraphX(clientX, left)\n        let graphY = eventYToGraphY(clientY, top)\n    \n        if (isZooming) {\n            onDataZoom({\n                minX: xScaleReverse(zoomData.current.rectX) as number,\n                maxX: xScaleReverse(zoomData.current.rectX + zoomData.current.width) as number,\n                maxY: yScaleReverse(zoomData.current.rectY) as number,\n            })\n            setIsZooming(false)\n            clearZoomRect()\n        } else {\n            zoomData.current = {\n                ...zoomData.current,\n                rectX: graphX,\n                rectY: graphY,\n                initialX: graphX,\n            }\n\n            setIsZooming(true)\n        }\n    }\n\n    const handleZoomMove = ({ clientX, clientY }: React.MouseEvent<HTMLDivElement>) => {\n        if (!isZooming) {\n            return\n        }\n\n        if (!graphSVG.current) {\n            return\n        }\n\n        const { left, top } = graphSVG.current.getBoundingClientRect()\n        let graphX = eventXToGraphX(clientX, left)\n        let graphY = eventYToGraphY(clientY, top)\n        \n        if (graphX < zoomData.current.initialX) {\n            zoomData.current = {\n                ...zoomData.current,\n                rectX: graphX,\n                dragX: graphX,\n            }\n        } else {\n            zoomData.current = {\n                ...zoomData.current,\n                rectX: zoomData.current.initialX,\n                dragX: graphX,\n            }\n        }\n\n        zoomData.current = {\n            ...zoomData.current,\n            rectY: graphY,\n        }\n\n        requestRef.current = requestAnimationFrame(changeZoomRect)\n    }\n\n    return (\n        <div\n            ref={graphContainer}\n            className={classes.graphContainer}\n            onClick={handleGraphClick}\n            onMouseMove={handleZoomMove}\n        >\n            <svg ref={graphSVG} height={GRAPH_HEIGHT} width={GRAPH_WIDTH}>\n                <Group top={GRAPH_MARGIN.top} left={GRAPH_MARGIN.left}>\n                    <AxisLeft\n                        scale={yScale}\n                        top={0}\n                        left={0}\n                        stroke={'#1b1a1e'}\n                    />\n                    <AxisBottom\n                        scale={xScale}\n                        top={yGraphMax}\n                        stroke={'#1b1a1e'}\n                    />\n                    {\n                        dataSets.map((dataSet, setIndex) => {\n                            const barColor = dataSet.color\n                            \n                            return dataSet.data.map(({ x, y }) => {\n                                const barX = xScale(x)\n                                const barY = yScale(y)\n                                const barWidth = 2\n                                const barHeight = yGraphMax - (yScale(y) as number)\n\n                                return (\n                                    <Bar\n                                        key={`${setIndex}-${x}`}\n                                        x={barX}\n                                        y={barY}\n                                        width={barWidth}\n                                        height={barHeight}\n                                        opacity={0.6}\n                                        fill={barColor}\n                                    />\n                                )\n                            })}\n                        )\n                    }\n                    {\n                        isZooming && (\n                            <rect\n                                x={zoomRect.rectX}\n                                y={zoomRect.rectY}\n                                width={zoomRect.width}\n                                height={zoomRect.height}\n                                fill='blue'\n                                opacity={0.4}\n                            />\n                        )\n                    }\n                </Group>\n            </svg>\n        </div>\n    )\n}\n\nexport default Graph\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\n\n\nimport { Pmaa } from '../../data/pmaaDetails'\nimport { Typography } from '@material-ui/core'\nimport { isSamePmaa } from '../../utils'\n\nconst useStyles = makeStyles({\n    container: {\n        padding: '10px',\n    },\n    gridHeader: {\n        paddingTop: '10px',\n        paddingBottom: '10px',\n    },\n    columnTitleItem: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '80px'\n    },\n    rowtitleItem: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '80px'\n\n    },\n    contentItem: {\n        borderRadius: '6px',\n        border: '1px solid #d3d3d3',\n        margin: '2px',\n        padding: '1px',\n        width: '80px',\n        \"&:hover\": {\n            backgroundColor: '#d3d3d3',\n        },\n    },\n})\n\ninterface PmaaGroup {\n    groupName: string\n    items: Pmaa[]\n}\n\ninterface Props {\n    pmaaGroup: PmaaGroup\n    columns: string[]\n    rows: string[]\n    selectedPmaas: Pmaa[]\n    onPmaaClick: (pmaa: Pmaa) => () => void\n}\n\nconst PmaaList: React.FC<Props> = ({ pmaaGroup, columns, rows, selectedPmaas, onPmaaClick }) => {\n    const classes = useStyles({})\n    const isPmaaSelected = (selectedPmaa: Pmaa) => selectedPmaas.some(pmaa => isSamePmaa(selectedPmaa,pmaa))\n\n    const getHeader = () => (\n        <tr>\n            <th>\n                <div className={classes.columnTitleItem}>\n                    Linkage\n                </div>\n            </th>\n            {columns.map(col => (\n                <th key={col}>\n                    <div className={classes.columnTitleItem}>\n                        <Typography noWrap>\n                            {col}\n                        </Typography>\n                    </div>\n                </th>\n            ))}\n        </tr>\n    )\n\n    const getRow = (pmaas: Pmaa[]) =>  (\n        <tr>\n            {\n                <td>\n                    <div className={classes.rowtitleItem}>\n                        {pmaas[0].linkage}\n                    </div>\n                </td>\n            }\n            {\n                pmaas.map((pmaa) => {\n                    return (\n                        <td key={`${pmaa.linkage}-${pmaa.name}`}>\n                            <div\n                                className={classes.contentItem}\n                                style={isPmaaSelected(pmaa) ? {backgroundColor: `${pmaa.color}`} : {}}\n                                onClick={onPmaaClick(pmaa)}\n                            >\n                                &nbsp;\n                            </div>\n                        </td>\n                        )\n                    }\n                )\n            }\n        </tr>\n    )\n    \n\n    return (\n        <div className={classes.container}>\n            <div className={classes.gridHeader}>\n                <Typography variant='subtitle1'>\n                    <b>{pmaaGroup.groupName}</b>\n                </Typography>\n            </div>\n            <table>\n                {getHeader()}\n                {rows.map(row => {\n                    const items = pmaaGroup.items.filter(item => item.linkage === row)\n\n                    return getRow(items)\n                })}\n            </table>\n        </div>\n    )\n}\n\nexport default PmaaList\n","import React, { useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/styles'\n\nimport {isSamePmaa, replacePmaa, MinMax, getRandomHexColor, getStatusTextColor } from '../../utils'\n\nimport { pmaaData, Pmaa } from '../../data/pmaaDetails'\n\nimport ActionButtons, { ACTION_BUTTONS_HEIGHT } from './ActionButtons'\nimport Graph, { GRAPH_HEIGHT, GRAPH_WIDTH, GRAPH_MARGIN } from './Graph'\nimport PmaaGrid from './PmaaGrid'\n\nconst GRAPH_CONTAINER_HEIGHT =  GRAPH_HEIGHT + ACTION_BUTTONS_HEIGHT + GRAPH_MARGIN.top + GRAPH_MARGIN.bottom\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        height: '100vh',\n    },\n    graphContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        marginTop: '10px',\n        height: GRAPH_CONTAINER_HEIGHT,\n        width: GRAPH_WIDTH + GRAPH_MARGIN.left + GRAPH_MARGIN.right,\n    },\n    gridContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: `calc(100% - ${GRAPH_CONTAINER_HEIGHT}px)`,\n        overflowY: 'scroll',\n        marginTop: '16px',\n    },\n    emptyTextContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        border: '0.5px dashed grey',\n        padding: '16px',\n        flex: 1,\n    },\n    legendContainer: {\n        textAlign: 'center',\n        fontSize: '12px',\n        overflowy: 'scroll',\n        flex: 1,\n    },\n    legendItem: {\n        display: 'inline-block',\n        borderRadius: '6px',\n        border: '1px solid #d3d3d3',\n        margin: '2px',\n        padding: '1px',\n        width: '80px',\n        \"&:hover\": {\n            backgroundColor: '#d3d3d3',\n        },\n    },\n})\n\ntype DataSetZoomHistory = Pmaa[]\n\nconst Visualiser: React.FC = () => {\n    const classes = useStyles({})\n    const [graphData, setGraphData] = useState<DataSetZoomHistory[]>([])\n    const [selectedPmaas, setSelectedPmaas] = useState<Pmaa[]>([])\n    const [rawPmaaData, setRawPmaaData] = useState(pmaaData)\n\n    const isPmaaSelected = (selectedPmaa: Pmaa) => (\n        selectedPmaas.some(pmaa => isSamePmaa(selectedPmaa, pmaa))\n    )\n \n    const handleItemClick = (selectedPmaa: Pmaa) => () => {\n        if (isPmaaSelected(selectedPmaa)) {\n            setSelectedPmaas((prevSelected) => (\n                prevSelected.filter(pmaa => !isSamePmaa(selectedPmaa, pmaa))\n            ))\n        } else {\n            setSelectedPmaas(prevSelected => [...prevSelected, selectedPmaa])\n        }\n    }\n\n    useEffect(() => {\n        setGraphData([selectedPmaas])\n    }, [selectedPmaas])\n    \n    const getLatestZoomData = (graphData: DataSetZoomHistory[]) => graphData[graphData.length - 1] || []\n\n    const handleDataZoom = ({ minX, maxX, maxY }: Omit<MinMax, 'minY'>) => {\n        const latestData = getLatestZoomData(graphData)\n        const newData = latestData\n            .map(pmaa => ({\n                ...pmaa,\n                data: pmaa\n                    .data\n                    .filter(({ x }) => x >= minX && x <= maxX)\n                    .map(({ x, y }) => ({ x, y: y > maxY ? maxY : y }))\n            }))\n        \n        setGraphData(prevState => [...prevState, [...newData]])\n    }\n\n    const handlePmaaColorChange = (pmaa: Pmaa) => () => {\n        const newPmaa = {\n            ...pmaa,\n            color: getRandomHexColor()\n        }\n\n        setSelectedPmaas(prevSelected => replacePmaa(prevSelected, newPmaa))\n\n        setRawPmaaData(prevRawData => prevRawData.map(group => {\n            if (group.groupName === newPmaa.groupName) {\n                return {\n                    ...group,\n                    items: replacePmaa(group.items, newPmaa)\n                }\n            }\n\n            return group\n        }))\n    }\n\n    const handleRefreshView = () => {\n        setGraphData(prevState => prevState.slice(0, 1))\n    }\n\n    const handleDataZoomBack = () => {\n        if (graphData.length > 1) {\n            setGraphData(prevState => prevState.slice(0, prevState.length - 1))\n        }\n    }\n\n    const handleDataClear = () => {\n        setSelectedPmaas([])\n    }\n\n    const showGraph = graphData.length > 0 && graphData.some(dataSets => dataSets.length > 0)\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.graphContainer}>\n                {\n                    showGraph ? (\n                        <>\n                            <ActionButtons\n                                onDataZoomBack={handleDataZoomBack}\n                                onRefreshView={handleRefreshView}\n                                onClearView={handleDataClear}\n                            />\n                           <Graph\n                                dataSets={getLatestZoomData(graphData)}\n                                onDataZoom={handleDataZoom}\n                            />\n                            <div className={classes.legendContainer}>\n                                {selectedPmaas.map(pmaa => {\n                                    return (\n                                        <div\n                                            key={`${pmaa.linkage}-${pmaa.name}`}\n                                            className={classes.legendItem}\n                                            style={{\n                                                backgroundColor: `${pmaa.color}`,\n                                                color: getStatusTextColor(pmaa.color)\n                                            }}\n                                            onClick={handlePmaaColorChange(pmaa)}\n                                        >\n                                            {`${pmaa.linkage}-${pmaa.name}`}\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        </>\n                    ) : (\n                        <div className={classes.emptyTextContainer}>\n                            Click any number of PMAAs to see their electron-impact mass spectrum (EI-MS)\n                        </div>\n                    )\n                }\n            </div>\n            <div className={classes.gridContainer}>\n                {\n                    rawPmaaData.map(groupData => {\n    \n                        const columns = new Set(groupData.items.map(item => item.name))\n                        const rows = new Set(groupData.items.map(item => item.linkage))\n    \n                        return (\n                            <PmaaGrid\n                                key={groupData.groupName}\n                                pmaaGroup={groupData}\n                                columns={Array.from(columns)}\n                                rows={Array.from(rows)}\n                                selectedPmaas={selectedPmaas}\n                                onPmaaClick={handleItemClick}\n                            />\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Visualiser\n","import React from 'react'\n\nimport Visualiser from './components/Visualiser'\n\n\nfunction App() {\n  return (\n    <Visualiser />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}