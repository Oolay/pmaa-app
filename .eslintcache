[{"/Users/alexa/projects/pmaa-app/src/App.tsx":"1","/Users/alexa/projects/pmaa-app/src/utils/getMockData.ts":"2","/Users/alexa/projects/pmaa-app/src/components/Visualiser/Graph.tsx":"3","/Users/alexa/projects/pmaa-app/src/components/Visualiser/index.tsx":"4"},{"size":176,"mtime":1606273820250,"results":"5","hashOfConfig":"6"},{"size":400,"mtime":1606273828615,"results":"7","hashOfConfig":"6"},{"size":6706,"mtime":1608940631577,"results":"8","hashOfConfig":"6"},{"size":488,"mtime":1606277950798,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"judbjg",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/alexa/projects/pmaa-app/src/App.tsx",[],["20","21"],"/Users/alexa/projects/pmaa-app/src/utils/getMockData.ts",[],"/Users/alexa/projects/pmaa-app/src/components/Visualiser/Graph.tsx",["22","23","24","25","26"],"import React, { useState, useEffect, useRef } from 'react'\nimport { Bar, Polygon } from '@vx/shape'\nimport { AxisLeft, AxisBottom } from '@vx/axis'\nimport { Group } from '@vx/group'\nimport { scaleLinear } from '@vx/scale'\nimport { localPoint } from '@vx/event';\nimport { isParenthesizedExpression } from 'typescript'\n\n\nexport interface DataPoint {\n    x: number\n    y: number\n}\n\ninterface Props {\n    data: DataPoint[]\n}\n\ninterface MinMaxX {\n    minX: number\n    maxX: number\n}\n\ninterface MinMaxY {\n    minY: number\n    maxY: number\n}\n\nfunction getXMinAndMax(data: DataPoint[]): MinMaxX {\n    return data.reduce(({ minX, maxX }, { x }) => {\n        const newMinX = x < minX ? x : minX\n        const newMaxX = x > maxX ? x : maxX\n\n        return {\n            minX: newMinX,\n            maxX: newMaxX,\n        }\n    }, {minX: Infinity, maxX: -Infinity})\n}\n\nfunction getYMinAndMax(data: DataPoint[]): MinMaxY {\n    return data.reduce(({ minY, maxY }, { y }) => {\n        const newMinY = y < minY ? y : minY\n        const newMaxY = y > maxY ? y : maxY\n\n        return {\n            minY: newMinY,\n            maxY: newMaxY,\n        }\n    }, {minY: Infinity, maxY: -Infinity})\n}\n\nconst width = 750\nconst height = 300\n\nconst margin = {\n    top: 60,\n    bottom: 60,\n    left: 80,\n    right: 80\n}\n\ninterface Point {\n    x: number\n    y: number\n}\n\nconst Graph: React.FC<Props> = ({ data }) => {\n    const graphContainer = useRef<HTMLDivElement>(null)\n    const zoomRect = useRef<SVGRectElement>(null)\n    const [isZooming, setIsZooming] = useState<boolean>(false)\n    const initialZoomClickXRef = useRef<number>(0)\n    const zoomDragXRef = useRef<number>(0)\n    const zoomRectXRef = useRef<number>(0)\n\n    const zoomWidthRef = useRef<number>(0)\n    const [initialZoomClickX, setInitialZoomClickX] = useState<number>(0)\n    const [zoomDragX, setZoomDragX] = useState<number>(0)\n    const [zoomRectX, setZoomRectX] = useState<number>(0)\n    const [zoomWidth, setZoomWidth] = useState<number>(0)\n    const requestRef = useRef<number>()\n\n    // Graph bounds\n    const xGraphMax = width - margin.bottom - 50\n    const yGraphMax = height - margin.top - 50\n\n    // Data bounds\n    const { minX, maxX } = getXMinAndMax(data)\n    const { minY, maxY } = getYMinAndMax(data)\n\n    const xScale = scaleLinear({\n        domain: [minX, maxX],\n        range: [0, xGraphMax],\n        round: true,\n    })\n\n    const yScale = scaleLinear({\n        domain: [minY, maxY],\n        range: [yGraphMax, 0],\n        round: true,\n    })\n\n    const eventXToGraphX = (x: number) => x - margin.left\n\n    const changeZoomRectWidth = () => {\n        let width: number\n\n        // if (zoomDragXRef.current < initialZoomClickXRef.current) {\n        //     width = initialZoomClickXRef.current - zoomRectXRef.current\n        // } else {\n        //     width = zoomDragXRef.current - initialZoomClickXRef.current\n        // }\n\n        if (zoomDragX < initialZoomClickX) {\n            width = initialZoomClickX - zoomRectX\n        } else {\n            width = zoomDragX - initialZoomClickX\n        }\n\n        // zoomWidthRef.current = width\n        setZoomWidth(width)\n    }\n\n    const clearZoomRect = () => {\n        zoomRectXRef.current = 0\n        zoomWidthRef.current = 0\n        initialZoomClickXRef.current = 0\n        zoomDragXRef.current = 0\n\n        window.cancelAnimationFrame(requestRef.current as number)\n    }\n\n    useEffect(() => {\n        if (isZooming) {\n            graphContainer.current?.addEventListener('mousemove', ({ x, y }: MouseEvent) => {\n                const graphX = eventXToGraphX(x)\n\n                if (graphX < initialZoomClickX) {\n                    // zoomRectXRef.current = graphX\n                    setZoomRectX(graphX)\n                } else {\n                    // zoomRectXRef.current = initialZoomClickXRef.current\n                    setZoomRectX(initialZoomClickX)\n                }\n\n                // zoomDragXRef.current = graphX\n                setZoomDragX(graphX)\n                requestRef.current = requestAnimationFrame(changeZoomRectWidth)\n            })\n        }\n        graphContainer.current?.addEventListener('click', ({ x, y }: MouseEvent) => {\n            if (isZooming) {\n                setIsZooming(false)\n                clearZoomRect()\n            } else {\n                const graphX = eventXToGraphX(x)\n                // initialZoomClickXRef.current = eventXToGraphX(x)\n                // zoomRectXRef.current = eventXToGraphX(x)\n\n                setInitialZoomClickX(graphX)\n                setInitialZoomClickX(graphX)\n                setIsZooming(true)\n            }\n        })\n\n        return () => {\n            window.cancelAnimationFrame(requestRef.current as number)\n        }\n    }, [isZooming, initialZoomClickX])\n\n    return (\n        <div\n            ref={graphContainer}\n        >\n            <svg height={height} width={width}>\n                <Group top={margin.top} left={margin.left}>\n                    <AxisLeft\n                        scale={yScale}\n                        top={0}\n                        left={0}\n                        label={'y label'}\n                        stroke={'#1b1a1e'}\n                    />\n                    <AxisBottom\n                        scale={xScale}\n                        top={yGraphMax}\n                        label={'x label'}\n                        stroke={'#1b1a1e'}\n                    />\n                    {\n                        data.map(({ x, y }) => {\n                            const barX = xScale(x)\n                            const barY = yScale(y)\n                            const barWidth = 1\n                            const barHeight = yGraphMax - (yScale(y) as number)\n\n                            return (\n                                <Bar\n                                    key={x}\n                                    x={barX}\n                                    y={barY}\n                                    width={barWidth}\n                                    height={barHeight}\n                                />\n                            )\n                        })\n                    }\n                    {\n                        isZooming && (\n                            <rect\n                                ref={zoomRect}\n                                x={zoomRectX}\n                                y={0}\n                                width={zoomWidth}\n                                height={yGraphMax}\n                                fill='blue'\n                                opacity={0.4}\n                            />\n                        )\n                    }\n                </Group>\n            </svg>\n        </div>\n    )\n}\n\nexport default Graph\n","/Users/alexa/projects/pmaa-app/src/components/Visualiser/index.tsx",["27"],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":2,"column":15,"nodeType":"34","messageId":"35","endLine":2,"endColumn":22},{"ruleId":"32","severity":1,"message":"36","line":6,"column":10,"nodeType":"34","messageId":"35","endLine":6,"endColumn":20},{"ruleId":"32","severity":1,"message":"37","line":7,"column":10,"nodeType":"34","messageId":"35","endLine":7,"endColumn":35},{"ruleId":"32","severity":1,"message":"38","line":63,"column":11,"nodeType":"34","messageId":"35","endLine":63,"endColumn":16},{"ruleId":"39","severity":1,"message":"40","line":169,"column":8,"nodeType":"41","endLine":169,"endColumn":38,"suggestions":"42"},{"ruleId":"32","severity":1,"message":"43","line":17,"column":11,"nodeType":"34","messageId":"35","endLine":17,"endColumn":18},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"@typescript-eslint/no-unused-vars","'Polygon' is defined but never used.","Identifier","unusedVar","'localPoint' is defined but never used.","'isParenthesizedExpression' is defined but never used.","'Point' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeZoomRectWidth'. Either include it or remove the dependency array.","ArrayExpression",["46"],"'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [isZooming, initialZoomClickX, changeZoomRectWidth]",{"range":"49","text":"50"},[4719,4749],"[isZooming, initialZoomClickX, changeZoomRectWidth]"]